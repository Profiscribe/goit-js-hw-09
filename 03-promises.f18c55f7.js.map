{"mappings":"iiBAQA,IAAAA,EAAAC,EAAA,SAEMC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBAcyC,SAAtEG,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUQ,MAAAP,IAEpBG,EAAO,CAAEJ,WAAUQ,MAAAP,MAEpBA,MAtBkBN,SAASC,cAAc,yBA2B/Ba,iBAAiB,UAAU,SAAAC,GAC1CA,EAAEC,iBAGF,IAFA,IAAIC,EAAaC,OAAOnB,EAAMoB,OAC1BC,EAAYF,OAAOhB,EAAKiB,OACnBE,EAAI,EAAGA,EAAIlB,EAAOgB,MAAOE,IAChCjB,EAAc,EAAIiB,EAAGJ,EAAaI,EAAID,GACnCE,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALV,MACjBY,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,UAGjDK,OAAM,SAAAN,G,IAAGlB,EAAQkB,EAARlB,SAAUyB,EAAKP,EAALV,MAClBY,EAAA5B,GAAS6B,OAAOK,QACd,sBAAqCH,OAAfvB,EAAS,QAAYuB,OAANE,EAAM,a","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\nimport Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst btnCreatePromise = document.querySelector('button[type=\"submit\"]');\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється,\n//   і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином,\n//   щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n//   Значенням промісу повинен бути об'єкт, в якому будуть властивості position \n//   і delay зі значеннями однойменних параметрів.Використовуй \n// початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nbtnCreatePromise.addEventListener('submit', e => {\n  e.preventDefault();\n  let firstDelay = Number(delay.value);\n  let delayStep = Number(step.value);\n  for (let i = 0; i < amount.value; i++) {\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","addEventListener","e","preventDefault","firstDelay","Number","value","delayStep","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure"],"version":3,"file":"03-promises.f18c55f7.js.map"}